from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from router.keyboards import get_categories_markup, get_post_geo_inline_markup, get_back_markup, get_my_reserved_markup
from router.redirects import redirect_to_error, redirect_to_change_index
from router.states import Form
from services.booking_service import BookingService
from storage.models.user import User

main_menu_page = Router()

@main_menu_page.message(Form.menu, F.text == 'üì¶ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å')
async def show_main_menu(message: Message, state: FSMContext):
    index = User.get_by_id(message.from_user.id).index
    categories_data = BookingService.get_categories_dict(index)

    if categories_data is None:
        await redirect_to_error(message)
        return

    await state.set_state(Form.categories)
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=get_categories_markup(categories_data))

@main_menu_page.message(Form.menu, F.text == 'üë§ –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def show_bookings(message: Message, state: FSMContext):
    user_uuid = User.get_by_id(message.from_user.id).login
    markup = get_my_reserved_markup(user_uuid)
    await state.set_state(Form.get_booking)
    await message.answer('–í–∞—à–∏ –∑–∞–ø–∏—Å–∏: (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å)', reply_markup=markup)

@main_menu_page.message(Form.menu, F.text == 'üîó –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ')
async def show_main_menu(message: Message, state: FSMContext):
    await state.set_state(Form.switch_index)
    await redirect_to_change_index(message)

@main_menu_page.message(Form.menu, F.text.startswith('üì´ –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞:'))
async def show_main_menu(message: Message, state: FSMContext):
    index = User.get_by_id(message.from_user.id).index
    post = BookingService.get_post(index)

    operating_windows_length = len(post["office"]["operating_windows"])

    response = (f'<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞: </b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {post['office']['name']}\n'
               f'<b>–ê–¥—Ä–µ—Å:</b> {post['office']['place']}\n<b>–ò–Ω–¥–µ–∫—Å:</b> {post['office']['index']}\n'
               f'<b>–û–∫–æ–Ω –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b> {operating_windows_length}')
    await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=get_post_geo_inline_markup(post['office']['coordinates']))

@main_menu_page.message(Form.menu, F.text == 'üîç –ü–æ–º–æ—â—å')
async def show_main_menu(message: Message, state: FSMContext):
    await state.set_state(Form.get_help)
    await message.answer('<b>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: </b>', parse_mode=ParseMode.HTML, reply_markup=get_back_markup())